
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ac9  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060c  00000000  00000000  00000d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cd  00000000  00000000  00001321  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fe  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f7  00000000  00000000  00001d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00001f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	{
		DDRC = 0x00;
	}
	else
	{
		DDRC = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
#include <avr/interrupt.h>
#include "IOlib.h"


int main(void)
{  
  70:	28 e0       	ldi	r18, 0x08	; 8
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	81 e0       	ldi	r24, 0x01	; 1
	}
}
void setPortC(int data){
	PORTC = data;
  76:	85 bb       	out	0x15, r24	; 21
		}*/
		
		// right to left pattern
		
		setPortC(pattern);
		pattern*=2;
  78:	88 0f       	add	r24, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	4f ef       	ldi	r20, 0xFF	; 255
  7c:	53 ec       	ldi	r21, 0xC3	; 195
  7e:	99 e0       	ldi	r25, 0x09	; 9
  80:	41 50       	subi	r20, 0x01	; 1
  82:	50 40       	sbci	r21, 0x00	; 0
  84:	90 40       	sbci	r25, 0x00	; 0
  86:	e1 f7       	brne	.-8      	; 0x80 <main+0x14>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x1e>
  8a:	00 00       	nop
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	31 09       	sbc	r19, r1
		_delay_ms(200);
		
		if (pattern == 0x00)
  90:	91 f7       	brne	.-28     	; 0x76 <main+0xa>
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	43 ec       	ldi	r20, 0xC3	; 195
  96:	59 e0       	ldi	r21, 0x09	; 9
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	40 40       	sbci	r20, 0x00	; 0
  9c:	50 40       	sbci	r21, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
  a4:	e5 cf       	rjmp	.-54     	; 0x70 <main+0x4>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
