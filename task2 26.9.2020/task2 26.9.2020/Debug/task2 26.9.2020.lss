
task2 26.9.2020.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c1  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000589  00000000  00000000  00000b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000361  00000000  00000000  000010ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00001410  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000372  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  000018a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000193e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <togglePinA>:
		return 1;
	}
	else{
		return 0;
	}
}
  6c:	9b b3       	in	r25, 0x1b	; 27
  6e:	21 e0       	ldi	r18, 0x01	; 1
  70:	30 e0       	ldi	r19, 0x00	; 0
  72:	02 c0       	rjmp	.+4      	; 0x78 <togglePinA+0xc>
  74:	22 0f       	add	r18, r18
  76:	33 1f       	adc	r19, r19
  78:	8a 95       	dec	r24
  7a:	e2 f7       	brpl	.-8      	; 0x74 <togglePinA+0x8>
  7c:	29 27       	eor	r18, r25
  7e:	2b bb       	out	0x1b, r18	; 27
  80:	08 95       	ret

00000082 <isPressedA>:
  82:	99 b3       	in	r25, 0x19	; 25
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <isPressedA+0xc>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	8a 95       	dec	r24
  90:	e2 f7       	brpl	.-8      	; 0x8a <isPressedA+0x8>
  92:	29 2b       	or	r18, r25
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	23 2b       	or	r18, r19
  9a:	11 f4       	brne	.+4      	; 0xa0 <isPressedA+0x1e>
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	08 95       	ret

000000a2 <setPinB>:
  a2:	9b b3       	in	r25, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <setPinB+0xc>
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	8a 95       	dec	r24
  b0:	e2 f7       	brpl	.-8      	; 0xaa <setPinB+0x8>
  b2:	29 2b       	or	r18, r25
  b4:	2b bb       	out	0x1b, r18	; 27
  b6:	08 95       	ret

000000b8 <resetPinB>:
  b8:	9b b3       	in	r25, 0x1b	; 27
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <resetPinB+0xc>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	8a 95       	dec	r24
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <resetPinB+0x8>
  c8:	20 95       	com	r18
  ca:	29 23       	and	r18, r25
  cc:	2b bb       	out	0x1b, r18	; 27
  ce:	08 95       	ret

000000d0 <main>:
    /* Replace with your application code */
    while (1) 
    {
		int pin_A = 4;
		int pin_B = 3;
		DDRA = (1<<pin_A);
  d0:	c0 e1       	ldi	r28, 0x10	; 16
  d2:	ca bb       	out	0x1a, r28	; 26
		DDRB = (0<<pin_B);
  d4:	17 ba       	out	0x17, r1	; 23
		
		togglePinA(pin_B);
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 36 00 	call	0x6c	; 0x6c <togglePinA>
		if (isPressedA(pin_A))
  de:	84 e0       	ldi	r24, 0x04	; 4
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 41 00 	call	0x82	; 0x82 <isPressedA>
  e6:	89 2b       	or	r24, r25
  e8:	29 f0       	breq	.+10     	; 0xf4 <main+0x24>
		{
			setPinB(pin_B);
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 51 00 	call	0xa2	; 0xa2 <setPinB>
  f2:	ef cf       	rjmp	.-34     	; 0xd2 <main+0x2>
		} 
		else
		{
			resetPinB(pin_B);
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 5c 00 	call	0xb8	; 0xb8 <resetPinB>
  fc:	ea cf       	rjmp	.-44     	; 0xd2 <main+0x2>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
